# 📊 Sales Data Analysis Project using SQL Server

## 🔍 Project Overview

This project showcases my ability to perform **data analysis using SQL Server** on real-world-like sales data. I imported cleaned CSV files into a relational database and used SQL queries to extract meaningful business insights. The goal was to demonstrate data cleaning, transformation, querying, and reporting skills.

---

## 🛠️ Tools & Technologies

- **Database:** Microsoft SQL Server  
- **Language:** SQL (T-SQL)  
- **Data Source:** CSV files (customers, products, sales, regions)  
- **Optional Visualization:** Power BI (for dashboarding, if applicable)

---

## 📂 Dataset Description

| Table Name  | Description                            |
|-------------|----------------------------------------|
| `customers` | Contains customer details              |
| `products`  | Contains product details               |
| `sales`     | Contains individual sales transactions |
| `regions`   | Contains region/location information   |

---

## ⚙️ Project Steps

### ✅ Step 1: Collected & Cleaned Data  
Downloaded and pre-processed CSV files to remove nulls, ensure consistency, and correct formatting.

### ✅ Step 2: Created SQL Tables  
Created relational tables in SQL Server using the `CREATE TABLE` command.

### ✅ Step 3: Loaded CSV Data into SQL Server  
Used SQL Server Management Studio (SSMS) import wizard to load the cleaned CSV files into respective tables.

### ✅ Step 4: Performed Data Analysis  
Wrote SQL queries to extract meaningful insights. Highlights include:

---

## 📈 Key SQL Queries & Insights

- **Monthly Sales Revenue**
```sql
SELECT FORMAT(sale_date, 'yyyy-MM') AS sale_month, SUM(total_amount) AS revenue FROM sales GROUP BY FORMAT(sale_date, 'yyyy-MM');

SQL Query
-- 1. Total sales revenue by month

SELECT 
    FORMAT(sale_date, 'yyyy-MM') AS sale_month,
    SUM(total_amount) AS monthly_revenue
FROM sales
GROUP BY FORMAT(sale_date, 'yyyy-MM')
ORDER BY sale_month;

-- 2. Top 10 Customers by Revenue

SELECT 
    c.customer_id,
    c.customer_name,
    SUM(s.total_amount) AS total_spent
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY c.customer_id, c.customer_name
ORDER BY total_spent DESC
OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;


--3. Sales by Region
SELECT 
    r.region,
    SUM(s.total_amount) AS region_revenue
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
JOIN regions r ON c.region = r.region
GROUP BY r.region
ORDER BY region_revenue DESC;

--4. Best-Selling Products
SELECT 
    p.product_name,
    SUM(s.quantity) AS total_units_sold,
    SUM(s.total_amount) AS total_sales
FROM sales s
JOIN products p ON s.product_id = p.product_id
GROUP BY p.product_name
ORDER BY total_sales DESC;

--5. Repeat Customers (Customers who bought more than once)
SELECT 
    c.customer_name,
    COUNT(DISTINCT FORMAT(s.sale_date, 'yyyy-MM')) AS active_months,
    COUNT(*) AS total_orders
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY c.customer_name
HAVING COUNT(*) > 1
ORDER BY total_orders DESC;

--6. Revenue Trend (Rolling 3-Month Avg)
WITH MonthlyRevenue AS (
    SELECT 
        FORMAT(sale_date, 'yyyy-MM') AS sale_month,
        SUM(total_amount) AS revenue
    FROM sales
    GROUP BY FORMAT(sale_date, 'yyyy-MM')
)
SELECT 
    sale_month,
    revenue,
    AVG(revenue) OVER (ORDER BY sale_month ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_3_month_avg
FROM MonthlyRevenue;

